
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizador;

import java_cup.runtime.*;
import java_cup.runtime.Symbol;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\034\000\002\002\004\000\002\013\007\000\002\014" +
    "\005\000\002\016\004\000\002\016\002\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\015\003\000" +
    "\002\017\005\000\002\020\005\000\002\020\007\000\002" +
    "\021\003\000\002\021\005\000\002\031\003\000\002\031" +
    "\003\000\002\022\004\000\002\023\006\000\002\023\007" +
    "\000\002\024\003\000\002\024\003\000\002\024\003\000" +
    "\002\026\010\000\002\027\005\000\002\027\002\000\002" +
    "\030\005\000\002\030\007\000\002\025\012" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\101\000\004\004\005\001\002\000\004\002\103\001" +
    "\002\000\004\005\006\001\002\000\004\006\007\001\002" +
    "\000\014\007\ufffd\026\ufffd\027\ufffd\030\ufffd\032\ufffd\001" +
    "\002\000\014\007\022\026\024\027\014\030\021\032\015" +
    "\001\002\000\004\010\012\001\002\000\004\002\000\001" +
    "\002\000\014\007\ufffe\026\ufffe\027\ufffe\030\ufffe\032\ufffe" +
    "\001\002\000\004\005\076\001\002\000\004\005\056\001" +
    "\002\000\014\007\ufffa\026\ufffa\027\ufffa\030\ufffa\032\ufffa" +
    "\001\002\000\014\007\ufff9\026\ufff9\027\ufff9\030\ufff9\032" +
    "\ufff9\001\002\000\014\007\ufffc\026\ufffc\027\ufffc\030\ufffc" +
    "\032\ufffc\001\002\000\004\005\042\001\002\000\004\011" +
    "\041\001\002\000\014\007\ufffb\026\ufffb\027\ufffb\030\ufffb" +
    "\032\ufffb\001\002\000\004\005\026\001\002\000\016\005" +
    "\035\007\ufff1\026\ufff1\027\ufff1\030\ufff1\032\ufff1\001\002" +
    "\000\004\035\027\001\002\000\010\013\032\016\033\017" +
    "\030\001\002\000\004\006\uffec\001\002\000\004\006\034" +
    "\001\002\000\004\006\uffed\001\002\000\004\006\uffee\001" +
    "\002\000\016\005\ufff0\007\ufff0\026\ufff0\027\ufff0\030\ufff0" +
    "\032\ufff0\001\002\000\004\035\036\001\002\000\010\013" +
    "\032\016\033\017\030\001\002\000\004\006\040\001\002" +
    "\000\016\005\uffef\007\uffef\026\uffef\027\uffef\030\uffef\032" +
    "\uffef\001\002\000\006\006\uffff\010\uffff\001\002\000\006" +
    "\014\043\031\uffe9\001\002\000\004\005\056\001\002\000" +
    "\004\031\045\001\002\000\006\033\046\034\050\001\002" +
    "\000\006\006\ufff3\015\ufff3\001\002\000\004\006\051\001" +
    "\002\000\006\006\ufff2\015\ufff2\001\002\000\014\007\ufffd" +
    "\026\ufffd\027\ufffd\030\ufffd\032\ufffd\001\002\000\004\006" +
    "\053\001\002\000\014\007\uffe6\026\uffe6\027\uffe6\030\uffe6" +
    "\032\uffe6\001\002\000\004\015\065\001\002\000\004\031" +
    "\061\001\002\000\006\025\057\031\ufff5\001\002\000\004" +
    "\005\056\001\002\000\004\031\ufff4\001\002\000\006\033" +
    "\046\034\050\001\002\000\006\006\063\015\uffe8\001\002" +
    "\000\004\005\056\001\002\000\004\015\uffe7\001\002\000" +
    "\006\006\uffea\031\uffea\001\002\000\004\031\074\001\002" +
    "\000\004\006\070\001\002\000\016\005\056\007\ufff8\026" +
    "\ufff8\027\ufff8\030\ufff8\032\ufff8\001\002\000\004\031\072" +
    "\001\002\000\006\033\046\034\050\001\002\000\004\006" +
    "\ufff6\001\002\000\006\033\046\034\050\001\002\000\004" +
    "\006\ufff7\001\002\000\006\006\uffe9\014\043\001\002\000" +
    "\004\006\100\001\002\000\014\007\ufffd\026\ufffd\027\ufffd" +
    "\030\ufffd\032\ufffd\001\002\000\004\006\102\001\002\000" +
    "\014\007\uffeb\026\uffeb\027\uffeb\030\uffeb\032\uffeb\001\002" +
    "\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\101\000\004\013\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\014\010\016\007" +
    "\001\001\000\014\015\012\017\022\022\017\025\016\026" +
    "\015\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\020\066\021\065\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\023\024\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\024\030\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\024\036\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\027\043" +
    "\001\001\000\006\021\054\030\053\001\001\000\002\001" +
    "\001\000\004\031\046\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\014\051\016\007\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\021\057\001" +
    "\001\000\002\001\001\000\004\031\061\001\001\000\002" +
    "\001\001\000\006\021\054\030\063\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\021\070\001\001\000\002\001\001\000\004\031" +
    "\072\001\001\000\002\001\001\000\004\031\074\001\001" +
    "\000\002\001\001\000\004\027\076\001\001\000\002\001" +
    "\001\000\006\014\100\016\007\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	//DECLARACIONES
    public static ArrayList<Funcion> dclArray = new ArrayList<Funcion>(); 
	//VARIABLES
 	public static ArrayList<Variable> variable = new ArrayList<Variable>(); 
 	public static ArrayList<String> idents = new ArrayList<String>(); 
	//CONSTANTE
 	public static ArrayList<Constante> constante = new ArrayList<Constante>(); 
	//PROCEDIMIENTO
	public static ArrayList<Procedimiento> procedimiento = new ArrayList<Procedimiento>(); 
	//FUNCION
	public static ArrayList<Funcion> funcion = new ArrayList<Funcion>(); 
 	//PROGRAMA
	public static ArrayList<Programa> programa = new ArrayList<Programa>(); 
    //BLOQUE
	public static ArrayList<Bloque> bloque = new ArrayList<Bloque>(); 
	//DECLIST
	public static ArrayList<Dcl> dclistArray = new ArrayList<Dcl>(); 
  	
	public static ArrayList<String> ErroresSintacticos=new ArrayList<String>();
	public int cont = 0;
	   
	

    /**Metodo al que se llama automáticamente ante algún error sintactico.*/
    public void syntax_error(Symbol s){
        System.out.println("Error en la Linea " + (s.right+1) +" Columna "+s.left+ ". Identificador "
        +s.value + " no reconocido." );
     ErroresSintacticos.add("Error Sintactico: "+s.value.toString()+" Linea: "+(s.right+1)+";");
    }



    /**Metodo al que se llama en el momento en que ya no es posible una recuperación de
    errores.*/
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.out.println("Error en la Linea " + (s.right+1)+ " Columna "+s.left+". Identificador " +
        s.value + " no reconocido.");
 ErroresSintacticos.add("Error Sintactico: "+s.value.toString()+" Linea: "+(s.right+1)+";");
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$sintactico$actions {
  private final sintactico parser;

  /** Constructor */
  CUP$sintactico$actions(sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$sintactico$do_action_part00000000(
    int                        CUP$sintactico$act_num,
    java_cup.runtime.lr_parser CUP$sintactico$parser,
    java.util.Stack            CUP$sintactico$stack,
    int                        CUP$sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$sintactico$result;

      /* select the action based on the action number */
      switch (CUP$sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PRG EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		Programa start_val = (Programa)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		RESULT = start_val;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$sintactico$parser.done_parsing();
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // PRG ::= PROGRAM IDENT POINT_SEMICOLON BLQ POINT 
            {
              Programa RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		int psleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String ps = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		Bloque b = (Bloque)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int ptleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int ptright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String pt = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
	Programa pro = new Programa();
	pro.programa = "program";
	pro.identificador = id;
	pro.bloque = b;
	programa.add(pro);
	RESULT =pro;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("PRG",9, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // BLQ ::= DCLLIST BEGIN END 
            {
              Bloque RESULT =null;
		int dclleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int dclright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		ArrayList<Dcl> dcl = (ArrayList<Dcl>)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
	Bloque blo = new Bloque();
    // public ArrayList<Dcist> dclist = null;
	// public ArrayList<Sentlist> sentlist = null;	
	ArrayList<Dcl> dcllist= new ArrayList<Dcl>();
	dcllist.addAll(dcl);
	blo.dclist=dcllist;
	blo.begin="{";
	blo.end="}";
	RESULT =blo; 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("BLQ",10, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DCLLIST ::= DCLLIST DCL 
            {
              ArrayList<Dcl> RESULT =null;
		int dclleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int dclright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		ArrayList<Dcl> dcl = (ArrayList<Dcl>)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Dcl d = (Dcl)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
	ArrayList<Dcl> dcllist= new ArrayList<Dcl>();
	dcllist.add(d);
    RESULT =dcllist; 


              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("DCLLIST",12, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DCLLIST ::= 
            {
              ArrayList<Dcl> RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("DCLLIST",12, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DCL ::= DEFCTE 
            {
              Dcl RESULT =null;
		int cteleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int cteright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Constante cte = (Constante)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
			Dcl dcl = new Dcl();
			dcl.constante=cte;
			RESULT =dcl;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("DCL",11, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DCL ::= DEFVAR 
            {
              Dcl RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
			Dcl dcl = new Dcl();
			dcl.variable=var;
			RESULT =dcl;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("DCL",11, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DCL ::= DEFPROC 
            {
              Dcl RESULT =null;
		int procleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int procright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Procedimiento proc = (Procedimiento)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
			Dcl dcl = new Dcl();
			dcl.procedimiento=proc;
			RESULT =dcl;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("DCL",11, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DCL ::= DEFFUN 
            {
              Dcl RESULT =null;
		int funleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int funright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Funcion fun = (Funcion)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
			Dcl dcl = new Dcl();
			dcl.funcion=fun;
			RESULT =dcl;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("DCL",11, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DEFVAR ::= VAR DEFVARLIST POINT_SEMICOLON 
            {
              Variable RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 
			Variable var = new Variable();
			RESULT =var;  
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("DEFVAR",13, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DEFVARLIST ::= VARLIST DOUBLE_COLON TBAS 
            {
              ArrayList<Variable> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		ArrayList<String> v = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
			Variable var = new Variable();
			var.variable="var";			
			ArrayList<String>array= new ArrayList<String>();
			array.addAll(v);
			var.identificador=array;
			var.tipo=t;
			variable.add(var);
			RESULT = variable;   
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("DEFVARLIST",14, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DEFVARLIST ::= DEFVARLIST POINT_SEMICOLON VARLIST DOUBLE_COLON TBAS 
            {
              ArrayList<Variable> RESULT =null;
		int dlleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).right;
		ArrayList<Variable> dl = (ArrayList<Variable>)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		ArrayList<String> v = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
			Variable var = new Variable();
			ArrayList<String>array= new ArrayList<String>();
			array.addAll(v);
			var.identificador=v;
			var.tipo=t;
			variable.add(var);
			RESULT = variable; 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("DEFVARLIST",14, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // VARLIST ::= IDENT 
            {
              ArrayList<String> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 
		  ArrayList<String>var= new ArrayList<String>();
			var.add(i);
       		RESULT =var;   
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("VARLIST",15, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // VARLIST ::= IDENT SEMICOLON VARLIST 
            {
              ArrayList<String> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		ArrayList<String> v = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
			ArrayList<String> var = new ArrayList<String>();
			var.add(i);
			var.addAll(v);
       		RESULT =var;    
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("VARLIST",15, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // TBAS ::= INTEGER 
            {
              String RESULT =null;
		 
			String tbas;
			tbas ="int";
			RESULT =tbas; 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("TBAS",23, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // TBAS ::= REAL 
            {
              String RESULT =null;
		 
			String tbas;
			tbas ="float";
			RESULT =tbas;  
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("TBAS",23, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DEFCTE ::= CONST CTELIST 
            {
              Constante RESULT =null;
		int consleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int consright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String cons = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int ctleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int ctright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		ArrayList<Constante> ct = (ArrayList<Constante>)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 
			Constante cte=new Constante();
			RESULT = cte; 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("DEFCTE",16, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // CTELIST ::= IDENT EQUAL SIMPVALUE POINT_SEMICOLON 
            {
              ArrayList<Constante> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int psleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int psright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String ps = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 
				Constante cte=new Constante();
				cte.constante = "const";
				cte.identificador = i;
				cte.valor = s;
				constante.add(cte);
				RESULT = constante;  
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CTELIST",17, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CTELIST ::= CTELIST IDENT EQUAL SIMPVALUE POINT_SEMICOLON 
            {
              ArrayList<Constante> RESULT =null;
		int clleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).right;
		ArrayList<Constante> cl = (ArrayList<Constante>)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int psleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int psright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String ps = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 
				Constante cte=new Constante();
				cte.constante = "const";
				cte.identificador = i;
				cte.valor = s;
				constante.add(cte);
				RESULT = constante; 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CTELIST",17, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SIMPVALUE ::= NUMERIC_INTEGER_CONST 
            {
              String RESULT =null;
		int integerleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int integerright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String integer = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
			
			RESULT =integer; 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("SIMPVALUE",18, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SIMPVALUE ::= NUMERIC_REAL_CONST 
            {
              String RESULT =null;
		int realleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int realright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String real = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 
			RESULT =real; 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("SIMPVALUE",18, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SIMPVALUE ::= STRING_CONST 
            {
              String RESULT =null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 
			RESULT =string; 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("SIMPVALUE",18, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DEFPROC ::= PROCEDURE IDENT FORMAL_PARAMLIST POINT_SEMICOLON BLQ POINT_SEMICOLON 
            {
              Procedimiento RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).value;
		int foleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int foright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		ArrayList<FormalParam> fo = (ArrayList<FormalParam>)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		int ps1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int ps1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String ps1 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		Bloque b = (Bloque)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int ps2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int ps2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String ps2 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
  			Procedimiento proc = new Procedimiento();
			proc.procedimiento ="void";
			proc.identificador = i;
			//array de params
			ArrayList<FormalParam> fp = new ArrayList<FormalParam>();
			fp.addAll(fo);
			proc.formalParam=fp;
			// bloque
			proc.bloque=b;
			procedimiento.add(proc);
			RESULT = proc;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("DEFPROC",20, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // FORMAL_PARAMLIST ::= OPEN_PARENTESIS FORMAL_PARAM CLOSE_PARENTESIS 
            {
              ArrayList<FormalParam> RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		FormalParam f = (FormalParam)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
			ArrayList<FormalParam> fp = new ArrayList<FormalParam>();
			fp.add(f);
			RESULT = fp;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("FORMAL_PARAMLIST",21, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // FORMAL_PARAMLIST ::= 
            {
              ArrayList<FormalParam> RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("FORMAL_PARAMLIST",21, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // FORMAL_PARAM ::= VARLIST DOUBLE_COLON TBAS 
            {
              FormalParam RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		ArrayList<String> v = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
			FormalParam formalp= new FormalParam();
			ArrayList<String>array= new ArrayList<String>();
			array.addAll(v);
			formalp.identificador=v;		
			formalp.tipo=t;
		 	RESULT =formalp;  
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("FORMAL_PARAM",22, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // FORMAL_PARAM ::= VARLIST DOUBLE_COLON TBAS POINT_SEMICOLON FORMAL_PARAM 
            {
              FormalParam RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).right;
		ArrayList<String> v = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int psleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String ps = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int fpleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		FormalParam fp = (FormalParam)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 
			FormalParam formalp= new FormalParam();
			ArrayList<String>array= new ArrayList<String>();
			array.addAll(v);
			formalp.identificador=v;		
			formalp.tipo=t;
		 	RESULT =formalp;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("FORMAL_PARAM",22, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DEFFUN ::= FUNCTION IDENT FORMAL_PARAMLIST DOUBLE_COLON TBAS POINT_SEMICOLON BLQ POINT_SEMICOLON 
            {
              Funcion RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-7)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-7)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-7)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)).value;
		int foleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).left;
		int foright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).right;
		ArrayList<FormalParam> fo = (ArrayList<FormalParam>)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		int p1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String p1 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		Bloque b = (Bloque)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String p2 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 
	  		Funcion fun = new Funcion();
			fun.funcion ="fun";
			fun.identificador = i;
			ArrayList<FormalParam> fp = new ArrayList<FormalParam>();
			fp.addAll(fo);
			fun.formalParam=fp;
			// bloque
			fun.bloque=b;
			fun.tipo = t;
			funcion.add(fun);
			RESULT = fun;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("DEFFUN",19, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$sintactico$do_action(
    int                        CUP$sintactico$act_num,
    java_cup.runtime.lr_parser CUP$sintactico$parser,
    java.util.Stack            CUP$sintactico$stack,
    int                        CUP$sintactico$top)
    throws java.lang.Exception
    {
              return CUP$sintactico$do_action_part00000000(
                               CUP$sintactico$act_num,
                               CUP$sintactico$parser,
                               CUP$sintactico$stack,
                               CUP$sintactico$top);
    }
}

}
