
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizador;

import java.util.ArrayList;

import java_cup.runtime.Symbol;

/**
 * CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
 */
@SuppressWarnings({ "rawtypes" })
public class sintactico extends java_cup.runtime.lr_parser {

	public final Class getSymbolContainer() {
		return sym.class;
	}

	/** Default constructor. */
	@Deprecated
	public sintactico() {
		super();
	}

	/** Constructor which sets the default scanner. */
	@Deprecated
	public sintactico(java_cup.runtime.Scanner s) {
		super(s);
	}

	/** Constructor which sets the default scanner. */
	public sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {
		super(s, sf);
	}

	/** Production table. */
	protected static final short _production_table[][] = unpackFromStrings(
			new String[] { "\000\002\000\002\002\004\000\002\003\005" });

	/** Access to production table. */
	public short[][] production_table() {
		return _production_table;
	}

	/** Parse-action table. */
	protected static final short[][] _action_table = unpackFromStrings(
			new String[] { "\000\006\000\004\004\005\001\002\000\004\002\010\001"
					+ "\002\000\004\005\006\001\002\000\004\006\007\001\002"
					+ "\000\004\002\000\001\002\000\004\002\001\001\002" });

	/** Access to parse-action table. */
	public short[][] action_table() {
		return _action_table;
	}

	/** <code>reduce_goto</code> table. */
	protected static final short[][] _reduce_table = unpackFromStrings(
			new String[] { "\000\006\000\004\003\003\001\001\000\002\001\001\000"
					+ "\002\001\001\000\002\001\001\000\002\001\001\000\002" + "\001\001" });

	/** Access to <code>reduce_goto</code> table. */
	public short[][] reduce_table() {
		return _reduce_table;
	}

	/** Instance of action encapsulation class. */
	protected CUP$sintactico$actions action_obj;

	/** Action encapsulation object initializer. */
	protected void init_actions() {
		action_obj = new CUP$sintactico$actions(this);
	}

	/** Invoke a user supplied parse action. */
	public java_cup.runtime.Symbol do_action(int act_num, java_cup.runtime.lr_parser parser, java.util.Stack stack,
			int top) throws java.lang.Exception {
		/* call code in generated class */
		return action_obj.CUP$sintactico$do_action(act_num, parser, stack, top);
	}

	/** Indicates start state. */
	public int start_state() {
		return 0;
	}

	/** Indicates start production. */
	public int start_production() {
		return 0;
	}

	/** <code>EOF</code> Symbol index. */
	public int EOF_sym() {
		return 0;
	}

	/** <code>error</code> Symbol index. */
	public int error_sym() {
		return 1;
	}

	public static ArrayList<Programa> pgr = new ArrayList<Programa>();
	public static ArrayList<String> ErroresSintacticos = new ArrayList<String>();
	public int cont = 0;

	/** Metodo al que se llama automáticamente ante algún error sintactico. */
	public void syntax_error(Symbol s) {
		System.out.println("Error en la Línea " + (s.right + 1) + " Columna " + s.left + ". Identificador " + s.value
				+ " no reconocido.");
		ErroresSintacticos.add("Error Sintactico: " + s.value.toString() + " Linea: " + (s.right + 1) + ";");
	}

	/**
	 * Metodo al que se llama en el momento en que ya no es posible una
	 * recuperación de errores.
	 */
	public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
		System.out.println("Error en la Linea " + (s.right + 1) + " Columna " + s.left + ". Identificador " + s.value
				+ " no reconocido.");
		ErroresSintacticos.add("Error Sintactico: " + s.value.toString() + " Linea: " + (s.right + 1) + ";");
	}

	/** Cup generated class to encapsulate user supplied action code. */
	@SuppressWarnings({ "rawtypes", "unchecked", "unused" })
	class CUP$sintactico$actions {
		private final sintactico parser;

		/** Constructor */
		CUP$sintactico$actions(sintactico parser) {
			this.parser = parser;
		}

		/** Method 0 with the actual generated action code for actions 0 to 300. */
		public final java_cup.runtime.Symbol CUP$sintactico$do_action_part00000000(int CUP$sintactico$act_num,
				java_cup.runtime.lr_parser CUP$sintactico$parser, java.util.Stack CUP$sintactico$stack,
				int CUP$sintactico$top) throws java.lang.Exception {
			/* Symbol object for return from actions */
			java_cup.runtime.Symbol CUP$sintactico$result;

			/* select the action based on the action number */
			switch (CUP$sintactico$act_num) {
			/* . . . . . . . . . . . . . . . . . . . . */
			case 0: // $START ::= PRG EOF
			{
				Object RESULT = null;
				int start_valleft = ((java_cup.runtime.Symbol) CUP$sintactico$stack
						.elementAt(CUP$sintactico$top - 1)).left;
				int start_valright = ((java_cup.runtime.Symbol) CUP$sintactico$stack
						.elementAt(CUP$sintactico$top - 1)).right;
				Programa start_val = (Programa) ((java_cup.runtime.Symbol) CUP$sintactico$stack
						.elementAt(CUP$sintactico$top - 1)).value;
				RESULT = start_val;
				CUP$sintactico$result = parser.getSymbolFactory().newSymbol("$START", 0,
						((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)),
						((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
			}
				/* ACCEPT */
				CUP$sintactico$parser.done_parsing();
				return CUP$sintactico$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 1: // PRG ::= PROGRAM IDENT POINT_SEMICOLON
			{
				Programa RESULT = null;
				int pleft = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).left;
				int pright = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).right;
				String p = (String) ((java_cup.runtime.Symbol) CUP$sintactico$stack
						.elementAt(CUP$sintactico$top - 2)).value;
				int idleft = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).left;
				int idright = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).right;
				String id = (String) ((java_cup.runtime.Symbol) CUP$sintactico$stack
						.elementAt(CUP$sintactico$top - 1)).value;
				int psleft = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).left;
				int psright = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).right;
				String ps = (String) ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;

				Programa programa = new Programa();
				programa.programa = "program";
				programa.identificador = id;
				programa.puntocoma = ";";
				pgr.add(programa);
				RESULT = programa;
				CUP$sintactico$result = parser.getSymbolFactory().newSymbol("PRG", 1,
						((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)),
						((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
			}
				return CUP$sintactico$result;

			/* . . . . . . */
			default:
				throw new Exception(
						"Invalid action number " + CUP$sintactico$act_num + "found in internal parse table");

			}
		} /* end of method */

		/** Method splitting the generated action code into several parts. */
		public final java_cup.runtime.Symbol CUP$sintactico$do_action(int CUP$sintactico$act_num,
				java_cup.runtime.lr_parser CUP$sintactico$parser, java.util.Stack CUP$sintactico$stack,
				int CUP$sintactico$top) throws java.lang.Exception {
			return CUP$sintactico$do_action_part00000000(CUP$sintactico$act_num, CUP$sintactico$parser,
					CUP$sintactico$stack, CUP$sintactico$top);
		}
	}

}
