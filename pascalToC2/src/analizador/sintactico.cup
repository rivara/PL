	package analizador;
//LIBRERIAS
	import java_cup.runtime.*;
	import java_cup.runtime.Symbol;
	import java.io.FileOutputStream;
	import java.io.IOException;
	import java.util.ArrayList;

//CONTROL DE ERRORES 
parser code {:

	//DECLARACIONES
    public static ArrayList<Funcion> dclArray = new ArrayList<Funcion>(); 
	//VARIABLES
 	public static ArrayList<Variable> variable = new ArrayList<Variable>(); 
 	public static ArrayList<String> idents = new ArrayList<String>(); 
	//CONSTANTE
 	public static ArrayList<Constante> constante = new ArrayList<Constante>(); 
	//PROCEDIMIENTO
	public static ArrayList<Procedimiento> procedimiento = new ArrayList<Procedimiento>(); 
	//FUNCION
	public static ArrayList<Funcion> funcion = new ArrayList<Funcion>(); 
 	//PROGRAMA
	public static ArrayList<Programa> programa = new ArrayList<Programa>(); 
    //BLOQUE
	public static ArrayList<Bloque> bloque = new ArrayList<Bloque>(); 
	//DECLIST
	public static ArrayList<Dcl> dclistArray = new ArrayList<Dcl>(); 
  	//CUERPO-- SENTENCIAS
	public static ArrayList<Sent> sentListArray = new ArrayList<Sent>(); 
   

	public static ArrayList<String> ErroresSintacticos=new ArrayList<String>();
	public int cont = 0;
	   
	

    /**Metodo al que se llama automáticamente ante algún error sintactico.*/
    public void syntax_error(Symbol s){
        System.out.println("Error en la Linea " + (s.right+1) +" Columna "+s.left+ ". Identificador "
        +s.value + " no reconocido." );
     ErroresSintacticos.add("Error Sintactico: "+s.value.toString()+" Linea: "+(s.right+1)+";");
    }



    /**Metodo al que se llama en el momento en que ya no es posible una recuperación de
    errores.*/
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.out.println("Error en la Linea " + (s.right+1)+ " Columna "+s.left+". Identificador " +
        s.value + " no reconocido.");
 ErroresSintacticos.add("Error Sintactico: "+s.value.toString()+" Linea: "+(s.right+1)+";");
    }
:};
	

	
//DECLARACION DE TERMINALES
	 terminal  String PROGRAM,IDENT ,POINT_SEMICOLON,BEGIN,POINT,END,
	 DOUBLEPOINTEQUAL,NUMERIC_REAL_CONST,OPEN_PARENTESIS,CLOSE_PARENTESIS,
	 NUMERIC_INTEGER_CONST,STRING_CONST,MOD,MULTIPLICACION,PLUS,DIV,MINUS,SEMICOLON,CONST,
	 PROCEDURE,FUNCTION,DOUBLE_COLON,VAR,INTEGER,REAL,EQUAL;

	 
	 

//NO TERMINALES

	non terminal Programa PRG;
	non terminal Bloque BLQ;
	
	non terminal ArrayList<Sent> SENTLIST;
	non terminal Sent SENT;
	
	non terminal Dcl DCL;
	non terminal ArrayList<Dcl>DCLLIST;

	////VARIABLES
	non terminal Variable DEFVAR;
	non terminal ArrayList<Variable> DEFVARLIST;
	non terminal ArrayList<String> VARLIST;
	////CONSTANTES
	non terminal Constante DEFCTE;
	non terminal ArrayList<Constante> CTELIST;
	non terminal String SIMPVALUE;
	//FUNCIONES
	non terminal Funcion DEFFUN;
	//POCEDIMIENTOS
	non terminal Procedimiento DEFPROC;
    non terminal ArrayList<FormalParam>	FORMAL_PARAMLIST ;
	non terminal FormalParam FORMAL_PARAM;
	// FINALES
	non terminal String TBAS,OPARIT,OP,ID,EXP,FACTOR,SUBPARAMLIST,EXPLIST,ASIG,PROC_CALL;
	

	
/*ORDENAMIENTO (rompe ambiedad de jerarquia)*/
precedence left STRING_CONST ,NUMERIC_REAL_CONST,NUMERIC_INTEGER_CONST;
precedence left MOD,MULTIPLICACION,PLUS,DIV,MINUS;
	
start with PRG;	
//GRAMATICA
PRG ::= PROGRAM:p IDENT:id POINT_SEMICOLON:ps BLQ:b  POINT:pt{:
	Programa pro = new Programa();
	pro.programa = "program";
	pro.identificador = id;
	pro.bloque = b;
	programa.add(pro);
	RESULT =pro;:} 
;


BLQ ::=DCLLIST:dcl BEGIN:b  SENTLIST:sl END:e{:
	Bloque blo = new Bloque();	
	//blo.dclist=dcl;
	blo.begin="{\n";
	blo.end="}";
	blo.sentlist=sl;
	RESULT =blo; :} 
	;
	
DCLLIST::= DCLLIST:dcl DCL:d{:
	ArrayList<Dcl> dcllist= new ArrayList<Dcl>();
	dcllist.add(d);
    RESULT =dcllist; 

:}|
;
DCL ::= DEFCTE:cte {:
			Dcl dcl = new Dcl();
			dcl.constante=cte;
			RESULT =dcl;
:}	
		|DEFVAR:var {:
			Dcl dcl = new Dcl();
			dcl.variable=var;
			RESULT =dcl;
:} 
		|DEFPROC:proc  {:
			Dcl dcl = new Dcl();
			dcl.procedimiento=proc;
			RESULT =dcl;
:} 
		|DEFFUN: fun  {:
			Dcl dcl = new Dcl();
			dcl.funcion=fun;
			RESULT =dcl;
:} 
	;	
	

///////////////////////////////////////////////////////////// VARIABLES	
		DEFVAR ::= VAR:v DEFVARLIST POINT_SEMICOLON:p  {: 
			Variable var = new Variable();
			RESULT =var;  :} 
	;
    DEFVARLIST ::=VARLIST:v  DOUBLE_COLON:d TBAS:t  {:
			Variable var = new Variable();
			var.variable="var";			
			ArrayList<String>array= new ArrayList<String>();
			array.addAll(v);
			var.identificador=array;
			var.tipo=t;
			variable.add(var);
			RESULT = variable;   :}	
			
			
	| DEFVARLIST:dl POINT_SEMICOLON:p  VARLIST:v DOUBLE_COLON:d TBAS:t  {:
			Variable var = new Variable();
			ArrayList<String>array= new ArrayList<String>();
			array.addAll(v);
			var.identificador=v;
			var.tipo=t;
			variable.add(var);
			RESULT = variable; :} 
			;

	VARLIST ::= IDENT:i  {: 
		  ArrayList<String>var= new ArrayList<String>();
			var.add(i);
       		RESULT =var;   :}
       		
	| IDENT:i  SEMICOLON:s VARLIST:v  {:
			ArrayList<String> var = new ArrayList<String>();
			var.add(i);
			var.addAll(v);
       		RESULT =var;    :}
	;
	
	

	TBAS ::= INTEGER {: 
			String tbas;
			tbas ="int";
			RESULT =tbas; :}
	| REAL {: 
			String tbas;
			tbas ="float";
			RESULT =tbas;  :}
	;
	
	
	
	
///////////////////////////////////////////////////////////// CONSTANTES	

	
	DEFCTE ::=CONST:cons CTELIST:ct {: 
			Constante cte=new Constante();
			RESULT = cte; :} 
	;
	
		
	
	CTELIST ::= IDENT:i EQUAL:e SIMPVALUE:s POINT_SEMICOLON:ps{: 
				Constante cte=new Constante();
				cte.constante = "const";
				cte.identificador = i;
				cte.valor = s;
				constante.add(cte);
				RESULT = constante;  :} 
	|CTELIST:cl IDENT:i EQUAL:e SIMPVALUE:s  POINT_SEMICOLON:ps{: 
				Constante cte=new Constante();
				cte.constante = "const";
				cte.identificador = i;
				cte.valor = s;
				constante.add(cte);
				RESULT = constante; :} 
	;
	
	
	SIMPVALUE ::= NUMERIC_INTEGER_CONST:integer {:	
			RESULT =integer; :}
	 		
			| NUMERIC_REAL_CONST:real {: 
			RESULT =real; :}
			
			| STRING_CONST:string  {: 
			RESULT =string; :}
	;


///////////////////////////////////////////////////////////// PROCEDIMIENTOS	
	

	DEFPROC ::= PROCEDURE:p IDENT:i FORMAL_PARAMLIST:fo POINT_SEMICOLON:ps1 BLQ:b POINT_SEMICOLON:ps2{:
  			Procedimiento proc = new Procedimiento();
			proc.procedimiento ="void";
			proc.identificador = i;
			//array de params
			ArrayList<FormalParam> fp = new ArrayList<FormalParam>();
			fp.addAll(fo);
			proc.formalParam=fp;
			// bloque
			proc.bloque=b;
			procedimiento.add(proc);
			RESULT = proc;:} 
	;
	
	

	FORMAL_PARAMLIST ::= OPEN_PARENTESIS:o FORMAL_PARAM:f CLOSE_PARENTESIS:c {:
			ArrayList<FormalParam> fp = new ArrayList<FormalParam>();
			fp.add(f);
			RESULT = fp;:}|
	;
	


	FORMAL_PARAM ::= VARLIST:v DOUBLE_COLON:d  TBAS:t {:
			FormalParam formalp= new FormalParam();
			ArrayList<String>array= new ArrayList<String>();
			array.addAll(v);
			formalp.identificador=v;		
			formalp.tipo=t;
		 	RESULT =formalp;  :} 
	| VARLIST:v DOUBLE_COLON:d TBAS:t  POINT_SEMICOLON:ps FORMAL_PARAM:fp {: 
			FormalParam formalp= new FormalParam();
			ArrayList<String>array= new ArrayList<String>();
			array.addAll(v);
			formalp.identificador=v;		
			formalp.tipo=t;
		 	RESULT =formalp;:} ;
	
	



	
///////////////////////////////////////////////////////////// FUNCIONES

	DEFFUN ::= FUNCTION:f IDENT:i FORMAL_PARAMLIST:fo DOUBLE_COLON:d TBAS:t POINT_SEMICOLON:p1 BLQ:b POINT_SEMICOLON:p2{: 
	  		Funcion fun = new Funcion();
			fun.funcion ="void";
			fun.identificador = i;
			ArrayList<FormalParam> fp = new ArrayList<FormalParam>();
			fp.addAll(fo);
			fun.formalParam=fp;
			// bloque
			fun.bloque=b;
			fun.tipo = t;
			funcion.add(fun);
			RESULT = fun;:} 
	;



////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////             PROGRAMA PPAL   ///////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////

// control
	SENTLIST ::= SENT:s {: 
	sentListArray.add(s);
	RESULT = sentListArray;
	 :}
	|SENTLIST:sl SENT:s {: 
	sentListArray.add(s);
	RESULT = sentListArray;
 :} ;




SENT ::= ASIG:a POINT_SEMICOLON{:
		Sent snt= new Sent();
		snt.asig=a;
		RESULT =snt; :}
|PROC_CALL:pc POINT_SEMICOLON{: 
		Sent snt= new Sent();
		snt.pro_call=pc;
		RESULT =snt;  :}
	;


ASIG ::= ID:id DOUBLEPOINTEQUAL:de EXP:e  {: 
			RESULT =id+"="+e+";\n"; 
	:};



	FACTOR ::= SIMPVALUE:s  {: 
		RESULT =s;  :}
	| OPEN_PARENTESIS:o EXP:e CLOSE_PARENTESIS:c {:

				RESULT ="("+e+")"; :}
	| IDENT:i  SUBPARAMLIST:s  {: 
			RESULT =i+s; 
	:}
	;


PROC_CALL ::= IDENT:i SUBPARAMLIST:s {:
			RESULT =i+s; :}
	;	
	



SUBPARAMLIST ::=  OPEN_PARENTESIS:o EXPLIST:e CLOSE_PARENTESIS:c {: 
				RESULT ="("+e+")"; :}|
		;



EXPLIST ::= EXP:e {:RESULT =e;:}
	| EXP:e SEMICOLON:s EXPLIST:ex  {: 
			RESULT =e+","+ex;  :}
	;




	EXP ::= EXP:e1 OP:o EXP:e2  {: 
		    String exp= e1 + o + e2;
			RESULT = exp;
:}
	| FACTOR:f  {: 
		RESULT = f;	 :}
	;
	
	OP ::= OPARIT:o  {: 
			RESULT =o;  :}
	;


	OPARIT ::= PLUS:p {: 
			
			RESULT ="+"; 
	:}
	| MINUS:m  {: 
			RESULT ="-";  
	:}
	| MULTIPLICACION:mu {:  
			RESULT="*";
	:}
	| DIV:d  {: 
			RESULT ="/";
	 :}
	| MOD:m {: 
			RESULT = "%";
	:};
	
	
	ID ::= IDENT:i{: 
			RESULT = i;  :};			
	


